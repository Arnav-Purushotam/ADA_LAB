
//warshall's algorithm using DP
//it converts a given adjacency matrix to a path matrix
//basically if there is a path from i to j, there should either be an edge from i to j 
//or there may be a path from i to j through k

#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
# define V 4
# define V1 3



int max(int a,int b){
    if(a >= b){
        return a;
    }else{
        return b;
    }
}


void warshall(int graph[V1][V1]){
    
    int path[V][V];
    
    for(int i=0;i<V1;i++){
        for(int j=0;j<V1;j++){
            path[i+1][j+1] = graph[i][j];
        }
    }
    
    for(int k=1;k<V;k++){
        for(int i=1;i<V;i++){
            for(int j=1;j<V;j++){
                path[i][j] = max(path[i][j], path[i][k] && path[k][j]);
            }
        }
    }
    
    for(int i=1;i<V;i++){
        printf("\n");
        for(int j=1;j<V;j++){
            printf(" %d",path[i][j]);
        }
    }
    
    
}



int main()
{
    int graph[V1][V1] = {
        {0,0,1},
        {1,0,0},
        {0,1,0}
    };
    
    int graph1[V1][V1];
    
    printf("\n enter the adjacency matrix : \n");
    
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            scanf(" %d",&graph1[i][j]);
        }
    }
    
    warshall(graph1);

    return 0;
}
